apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "postgresql.fullname" . }}
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "postgresql.selectorLabels" . | nindent 6 }}      
  template:
    metadata:
      labels:
        {{- include "postgresql.selectorLabels" . | nindent 8 }}      
    spec:
      containers:
        - name: {{ template "postgresql.fullname" . }}
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}        
          env:
            - name: POSTGRES_USER
              value: {{ default "postgres" .Values.postgresUser | quote }}
              # Required for pg_isready in the health probes.
            - name: PGUSER
              value: {{ default "postgres" .Values.postgresUser | quote }}
            - name: POSTGRES_DB
              value: {{ default "" .Values.postgresDatabase | quote }}
            - name: POSTGRES_INITDB_ARGS
              value: {{ default "" .Values.postgresInitdbArgs | quote }}
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "postgresql.fullname" . }}
                  key: postgres-password
            - name: POD_IP
              valueFrom: { fieldRef: { fieldPath: status.podIP } }
          ports:
            - name: postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready --host $POD_IP
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready --host $POD_IP
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - name: data
            mountPath: /var/lib/postgresql/data/pgdata
      volumes:
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "postgresql.fullname" .) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
